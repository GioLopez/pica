openapi: 3.0.1
info:
  title: API Doc Toures - Bal√≥n
  description: 'Representacion de la estructura de los servicios establecidos para el proceso de compra de paquetes turisticos y estandar de comunicacion para los sistemas internos de consumo de los servicios usando API REST'
  termsOfService: http://swagger.io/terms/
  contact:
    email: motedequeso@javeriana.edu.co
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 0.1.0
externalDocs:
  description: Acceder al codigo fuente
  url: https://github.com/GioLopez/pica
servers:
- url: https://www.touresbalon/api/
- url: http://www.touresbalon/api/v2
tags:
- name: login
  description: Servicio de validacion de usuario
- name: user
  description: Servicio para manejo de usuarios
- name: event
  description: Servicio para manejo de eventos
- name: offer
description: Servicio para manejo de ofertas
paths:
  /login:
    post:
      tags:
      - login
      summary: Valida las credenciales de un usuario
      operationId: validUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/xml:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        200:
          description: login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseLogin'
        404:
          description: Invalid user login
          content: {}
        405:
          description: Invalid input
          content: {}
  /logout:
    get:
      tags:
      - login
      summary: Cierre de session de usuario
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user:
    get:
      tags:
      - user
      summary: Buscar Usuarios
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        404:
          description: Offer not found
          content: {}
    post:
      tags:
      - user
      summary: Crear Usuario
      description: Operacion para la creacion de usuario.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Obtener por nombre de usuario
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'Retorna la informacion del usuario. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Actualizar un usuario
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: username a actualizar
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
    delete:
      tags:
      - user
      summary: Eliminar un usuario
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
  /event/:
    post:
      tags:
      - event
      summary: Crea un evento
      operationId: addEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        201:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        405:
          description: Invalid input
          content: {}
    get:
      tags:
      - event
      summary: Listado de eventos
      description: Retorna el listado de eventos
      operationId: eventList
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /event/{eventId}:
    get:
      tags:
      - event
      summary: Busca eventos por id
      operationId: findEventById
      parameters:
      - name: eventId
        in: path
        description: ID of event to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        404:
          description: Event not found
          content: {}
    put:
      tags:
      - event
      summary: Actualizar un evento
      operationId: updateEvent
      parameters:
      - name: eventId
        in: path
        description: evento a actualizar
        required: true
        schema:
          type: string
      requestBody:
        description: Updated event object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        400:
          description: Invalid event supplied
          content: {}
        404:
          description: Event not found
          content: {}
    delete:
      tags:
      - event
      summary: Elimina un evento
      operationId: deleteEvent
      parameters:
      - name: eventId
        in: path
        description: Event id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Event not found
          content: {}
  /offer:
    get:
      tags:
      - offer
      summary: Buscar ofertas
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer'
        404:
          description: Offer not found
          content: {}
    post:
      tags:
      - offer
      summary: creacion de una offerta
      operationId: createOffer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Offer'
        required: true
      responses:
        200:
          description: offer successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        404:
          description: Invalid offer
          content: {}
        405:
          description: Invalid input
          content: {}
  /offer/{offerId}:
    get:
      tags:
      - offer
      summary: Buscar ofertas por id
      operationId: findOfferById
      parameters:
      - name: offerId
        in: path
        description: ID of offert to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Offer'
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        404:
          description: Offer not found
          content: {}
    put:
      tags:
      - offer
      summary: Actualizar un oferta
      operationId: updateOffer
      parameters:
      - name: offerId
        in: path
        description: Offerta a actualizar
        required: true
        schema:
          type: string
      requestBody:
        description: Updated offer object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Offer'
        required: true
      responses:
        400:
          description: Invalid event supplied
          content: {}
        404:
          description: Event not found
          content: {}
    delete:
      tags:
      - offer
      summary: Elimina un oferta
      operationId: deleteOffer
      parameters:
      - name: offerId
        in: path
        description: Offer id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Offer not found
          content: {}
components:
  schemas:
    Login:
      required:
      - username
      - password
      type: object
      properties:
        username:
          type: string
          example: usertoures@touresbalon.com
        password:
          type: string
          example: A23-45RSSP09*4323
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Event:
      required:
      - name
      - date
      - location
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: final de futbol
        date:
          type: string
          example: 2019/12/12
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: Event
    Offer:
      required:
      - type
      - name
      - date
      - location
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: integer
          example: 1
        name:
          type: string
          example: hotel mote e queso
        date:
          type: string
          example: 2019/12/12
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    ApiResponseLogin:
      type: object
      properties:
        token:
          type: string
          example: AAAnunun72hyb666EEEEEEEyyytvgvr
        message:
          type: string
          example: "valid user login"
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
